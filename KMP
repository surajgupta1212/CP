// Longest common prefix suffix LPS
// KMP

vector<int> KMP(string& text, string& pattern) {
        int m = pattern.length();
        vector<int> LPS(m, 0), indices;
        int i = 1, len = 0;

        while (i < m) {
            if (pattern[i] == pattern[len]) {
                len ++;
                LPS[i] = len; i++;
            }
            else {
                if (len != 0) {
                    len = LPS[len - 1];
                }
                else {
                    LPS[i] = 0;
                    i ++;
                }
            }
        }

        int n = text.size(), j = 0; i = 0;

        while (i < n) {
            if (text[i] == pattern[j]) {
                i ++, j ++;
            }
            if (j == m) {
                indices.push_back(i - j);
                j = LPS[j-1];
            }
            else if (i < n && text[i] != pattern[j]) {
                if (j != 0) {
                    j = LPS[j-1];
                }
                else i ++;
            }
        }

        return indices;
    }
