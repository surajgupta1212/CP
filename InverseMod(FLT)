// Theoram is inverse mod of a^(-1) % MOD is pow(a, MOD-2) % MOD

const int MOD = 1e9 + 7;
const int MX = 1e5;

long long fact[MX];
# define ll long long 

ll binaryExp(ll a, ll n) {

    if (n == 0) return 1;
    if (n == 1) return a;

    ll res = binaryExp(a, n / 2) % MOD;
    res = (res * res) % MOD;

    if (n & 1) res = (res * a) % MOD;

    return res;
}

void init() {

    fact[0] = 1;
    for (int i = 1; i < MX; i++) {
        fact[i] = fact[i - 1] * i % MOD;
    }
}

ll ncrCalc(ll n, ll r) {

    if (r > n || r < 0) return 0;

    ll num = fact[n], den = (1LL * fact[r] * fact[n-r]) % MOD;
    return (num * binaryExp(den, MOD - 2)) % MOD; // Fermat's Theoram
}
